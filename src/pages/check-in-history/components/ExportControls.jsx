import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const ExportControls = ({ data, onExport }) => {
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState('csv');

  const exportFormats = [
    { value: 'csv', label: 'CSV File', icon: 'FileText', description: 'Spreadsheet compatible' },
    { value: 'json', label: 'JSON File', icon: 'Code', description: 'Developer friendly' },
    { value: 'pdf', label: 'PDF Report', icon: 'FileDown', description: 'Printable summary' }
  ];

  const handleExport = async (format) => {
    setIsExporting(true);
    
    try {
      // Simulate export process
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      if (format === 'csv') {
        exportToCSV();
      } else if (format === 'json') {
        exportToJSON();
      } else if (format === 'pdf') {
        exportToPDF();
      }
      
      // Notify parent component
      if (onExport) {
        onExport(format);
      }
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const exportToCSV = () => {
    const headers = [
      'Date',
      'Workout Type',
      'Duration (min)',
      'Mood (1-5)',
      'Energy Level (1-10)',
      'Workout Summary',
      'Goals Updated'
    ];

    const csvData = data?.map(entry => [
      new Date(entry.date)?.toLocaleDateString(),
      entry?.workoutType,
      entry?.duration,
      entry?.mood,
      entry?.energyLevel,
      `"${entry?.workoutSummary?.replace(/"/g, '""')}"`,
      entry?.goalUpdates ? entry?.goalUpdates?.map(g => g?.goalTitle)?.join('; ') : ''
    ]);

    const csvContent = [
      headers?.join(','),
      ...csvData?.map(row => row?.join(','))
    ]?.join('\n');

    downloadFile(csvContent, 'fitness-check-ins.csv', 'text/csv');
  };

  const exportToJSON = () => {
    const jsonData = {
      exportDate: new Date()?.toISOString(),
      totalEntries: data?.length,
      data: data?.map(entry => ({
        ...entry,
        date: new Date(entry.date)?.toISOString()
      }))
    };

    const jsonContent = JSON.stringify(jsonData, null, 2);
    downloadFile(jsonContent, 'fitness-check-ins.json', 'application/json');
  };

  const exportToPDF = () => {
    // In a real app, you'd use a library like jsPDF // For now, we'll create a simple text-based report
    const reportContent = generateTextReport();
    downloadFile(reportContent, 'fitness-report.txt', 'text/plain');
  };

  const generateTextReport = () => {
    const totalEntries = data?.length;
    const avgMood = (data?.reduce((sum, entry) => sum + entry?.mood, 0) / totalEntries)?.toFixed(1);
    const avgEnergy = (data?.reduce((sum, entry) => sum + entry?.energyLevel, 0) / totalEntries)?.toFixed(1);
    const totalWorkoutTime = data?.reduce((sum, entry) => sum + entry?.duration, 0);

    return `FITNESS TRACKING REPORT
Generated on: ${new Date()?.toLocaleDateString()}

SUMMARY STATISTICS
==================
Total Check-ins: ${totalEntries}
Average Mood: ${avgMood}/5
Average Energy: ${avgEnergy}/10
Total Workout Time: ${Math.round(totalWorkoutTime / 60)} hours

RECENT ENTRIES
==============
${data?.slice(-10)?.map(entry => 
  `${new Date(entry.date)?.toLocaleDateString()} - ${entry?.workoutType} (${entry?.duration}min)
  Mood: ${entry?.mood}/5, Energy: ${entry?.energyLevel}/10
  Summary: ${entry?.workoutSummary}
  ---`
)?.join('\n')}

This report was generated by Denny's Fitness Track.
`;
  };

  const downloadFile = (content, filename, mimeType) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body?.appendChild(link);
    link?.click();
    document.body?.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-card border border-border rounded-lg p-4 shadow-soft mb-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <Icon name="Download" size={20} className="text-primary" />
          <div>
            <h3 className="font-semibold text-foreground">
              Export Data
            </h3>
            <p className="text-sm text-muted-foreground">
              Download your fitness history
            </p>
          </div>
        </div>
        
        <div className="text-sm text-muted-foreground">
          {data?.length} entries available
        </div>
      </div>
      {/* Export format options */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
        {exportFormats?.map((format) => (
          <div
            key={format?.value}
            className={`p-4 rounded-lg border-2 cursor-pointer transition-all duration-150 hover-lift ${
              exportFormat === format?.value
                ? 'border-primary bg-primary/5' :'border-border hover:border-muted-foreground/30'
            }`}
            onClick={() => setExportFormat(format?.value)}
          >
            <div className="flex items-center space-x-3 mb-2">
              <div className={`p-2 rounded-lg ${
                exportFormat === format?.value ? 'bg-primary text-primary-foreground' : 'bg-muted'
              }`}>
                <Icon 
                  name={format?.icon} 
                  size={16} 
                  className={exportFormat === format?.value ? '' : 'text-muted-foreground'}
                />
              </div>
              <div>
                <p className="font-medium text-foreground text-sm">
                  {format?.label}
                </p>
                <p className="text-xs text-muted-foreground">
                  {format?.description}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
      {/* Export actions */}
      <div className="flex items-center justify-between pt-4 border-t border-border">
        <div className="text-xs text-muted-foreground">
          <div className="flex items-center space-x-1">
            <Icon name="Info" size={12} />
            <span>
              Exports include all filtered data with personal information removed
            </span>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            iconName="Share"
            iconPosition="left"
            onClick={() => {
              // Share functionality - could open share dialog
              if (navigator.share) {
                navigator.share({
                  title: 'My Fitness Progress',
                  text: `I've completed ${data?.length} fitness check-ins!`,
                  url: window.location?.href
                });
              }
            }}
          >
            Share Progress
          </Button>

          <Button
            variant="default"
            size="sm"
            iconName="Download"
            iconPosition="left"
            loading={isExporting}
            onClick={() => handleExport(exportFormat)}
            disabled={data?.length === 0}
          >
            {isExporting ? 'Exporting...' : `Export ${exportFormat?.toUpperCase()}`}
          </Button>
        </div>
      </div>
      {/* Export tips */}
      <div className="mt-4 p-3 bg-muted/30 rounded-lg">
        <div className="flex items-start space-x-2">
          <Icon name="Lightbulb" size={16} className="text-primary mt-0.5" />
          <div className="text-xs text-muted-foreground">
            <p className="font-medium text-foreground mb-1">Export Tips:</p>
            <ul className="space-y-1">
              <li>• CSV files can be opened in Excel or Google Sheets</li>
              <li>• JSON format preserves all data structure for developers</li>
              <li>• PDF reports are great for sharing with trainers or doctors</li>
              <li>• All exports respect your current filter settings</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExportControls;